# This config was automatically generated from your source code
# Stacks detected: cicd:github-actions:.github/workflows,deps:python:.,package_manager:poetry:.
version: 2.1
orbs:
  python: circleci/python@2
jobs:
  test-python:
    # Install dependencies and run tests
    docker:
      - image: cimg/python:3.12-node
    environment:
      ENDORCTL_VERSION: "latest"
      ENDOR_NAMESPACE: "arsalan-learn"
      GH_USER: "arsalanendor"
      CIRCLE_PROJECT_REPONAME: "python_poetry_test"
      #ENDOR_API_CREDENTIALS_KEY: "$ENDOR_API_CREDENTIALS_KEY"
      #ENDOR_API_CREDENTIALS_SECRET: "$ENDOR_API_CREDENTIALS_SECRET"
    steps:
      - checkout
      # - python/install-packages:
      #     pkg-manager: poetry
      # - run:
      #     name: Run tests
      #     command: poetry run pytest --junitxml=junit.xml || ((($? == 5)) && echo 'Did not find any tests to run.')
      - run:
          name: "Install endorctl"
          command: |
            curl https://api.endorlabs.com/download/latest/endorctl_linux_amd64 -o endorctl
            echo "$(curl -s https://api.endorlabs.com/sha/latest/endorctl_linux_amd64)  endorctl" | sha256sum -c;
            if [ $? -ne 0 ]; then
              echo "Integrity check failed";
              exit 1;
            fi
            chmod +x ./endorctl
            ./endorctl --version            
      - run:
          name: "Endor Labs Test"
          command: |
            echo $CIRCLE_BRANCH
            echo $CIRCLE_REPOSITORY_URL
            echo $CIRCLE_PULL_REQUEST
            echo $CIRCLE_PULL_REQUESTS
            echo $CIRCLE_PR_NUMBER
            echo $CIRCLE_PIPELINE_ID
            echo $CIRCLE_PROJECT_USERNAME
            echo $CIRCLE_PROJECT_REPONAME
            echo $CIRCLE_BRANCH

            sudo apt-get install jq
            pr_response=$(curl --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open" \
            -u $GH_USER:$GITHUB_ACCESS_TOKEN)
            
            # if [ $(echo $pr_response | jq length) -eq 0 ]; then
            #   echo "No PR found to update"
            # else
            #   #pr_comment_url=$(echo $pr_response | jq -r ".[]._links.comments.href")
            # fi
            pr_comment_number=$(echo $pr_response | jq -r ".[].number"
            echo $pr_comment_number
            # curl --location --request POST "$pr_comment_url" \
            # -u $GH_USER:$GITHUB_ACCESS_TOKEN \
            # --header 'Content-Type: application/json' \
            # --data-raw '{
            #   "body": "This would be the data to add lalalala"
            # }'
            
            ./endorctl scan --pr --dependencies --github-token="$GITHUB_ACCESS_TOKEN" --github-pr-id=$pr_comment_number --enable-pr-comments
      - store_test_results:
          path: junit.xml
  deploy:
    # This is an example deploy job, not actually used by the workflow
    docker:
      - image: cimg/base:stable
    steps:
      # Replace this with steps to deploy to users
      - run:
          name: deploy
          command: '#e.g. ./deploy.sh'
      - run:
          name: found github actions config
          command: ':'
workflows:
  build-and-test:
    jobs:
      - test-python
    # - deploy:
    #     requires:
    #       - test-python
